import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

// POST - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
export async function POST(request: NextRequest) {
  console.log('üîµ API /assign called');
  try {
    const body = await request.json();
    console.log('üì¶ Request body:', body);
    
    const { 
      applicantId, // ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å VacantPosition
      vacantPositionId, // ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å PolicePersonnel
      notes 
    } = body;

    console.log('üîç Extracted params:', { applicantId, vacantPositionId, notes });

    if (!applicantId || !vacantPositionId) {
      console.log('‚ùå Missing required fields');
      return NextResponse.json(
        { error: 'Applicant ID and vacant position ID are required' },
        { status: 400 }
      );
    }

    // ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    console.log('üîÑ Starting transaction...');
    const result = await prisma.$transaction(async (tx) => {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠
      console.log('üì• Fetching applicant:', applicantId);
      const applicant = await tx.vacantPosition.findUnique({
        where: { id: applicantId },
        include: {
          posCodeMaster: true,
          requestedPosCode: true,
        }
      });

      if (!applicant) {
        console.log('‚ùå Applicant not found');
        throw new Error('Applicant not found');
      }
      console.log('‚úÖ Found applicant:', applicant.fullName);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
      console.log('üì• Fetching vacant position:', vacantPositionId);
      const vacantPosition = await tx.policePersonnel.findUnique({
        where: { id: vacantPositionId },
        include: {
          posCodeMaster: true,
        }
      });

      if (!vacantPosition) {
        console.log('‚ùå Vacant position not found');
        throw new Error('Vacant position not found');
      }
      console.log('‚úÖ Found vacant position:', {
        position: vacantPosition.position,
        unit: vacantPosition.unit,
        fullName: vacantPosition.fullName,
        isOccupied: !!(vacantPosition.fullName && vacantPosition.fullName.trim() !== '' && vacantPosition.fullName !== '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á')
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á)
      // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤ fullName ‡πÄ‡∏õ‡πá‡∏ô null, '', '‡∏ß‡πà‡∏≤‡∏á', '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á', '‡∏ß‡πà‡∏≤‡∏á (‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)', ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ß‡πà‡∏≤‡∏á(‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)'
      const isVacant = !vacantPosition.fullName || 
                       vacantPosition.fullName.trim() === '' || 
                       vacantPosition.fullName === '‡∏ß‡πà‡∏≤‡∏á' ||
                       vacantPosition.fullName === '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á' ||
                       vacantPosition.fullName === '‡∏ß‡πà‡∏≤‡∏á (‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)' ||
                       vacantPosition.fullName === '‡∏ß‡πà‡∏≤‡∏á(‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)';
      
      if (!isVacant) {
        console.log('‚ùå Position already occupied by:', vacantPosition.fullName);
        return NextResponse.json(
          { 
            error: 'Position is no longer vacant',
            details: `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${vacantPosition.fullName}` 
          },
          { status: 409 }
        );
      }

      console.log('‚úÖ Position is vacant, proceeding with assignment...');
      
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á update police_personnel ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏õ‡∏µ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô SwapTransaction ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      console.log('üíæ Creating swap transaction (without updating police_personnel)...');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á SwapTransaction
      const currentYear = new Date().getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
      const transaction = await tx.swapTransaction.create({
        data: {
          year: currentYear,
          swapDate: new Date(),
          swapType: 'vacant-assignment',
          groupName: `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà: ${applicant.fullName} ‚Üí ${vacantPosition.position} ${vacantPosition.unit}`,
          status: 'completed',
          notes: notes || null,
          createdBy: 'admin', // ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏£‡∏¥‡∏á
        },
      });
      console.log('‚úÖ Created transaction:', transaction.id);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
      console.log('üíæ Creating transaction detail...');
      const detail = await tx.swapTransactionDetail.create({
        data: {
          transactionId: transaction.id,
          sequence: 1,
          personnelId: applicant.id,
          nationalId: applicant.nationalId,
          fullName: applicant.fullName || '',
          rank: applicant.rank,
          posCodeId: applicant.posCodeId,
          fromPosition: applicant.position,
          fromPositionNumber: applicant.positionNumber,
          fromUnit: applicant.unit,
          toPosition: vacantPosition.position,
          toPositionNumber: vacantPosition.positionNumber,
          toUnit: vacantPosition.unit,
          notes: null,
        },
      });
      console.log('‚úÖ Created transaction detail:', detail.id);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
      console.log('ÔøΩ Updating applicant status to assigned...');
      const updatedApplicant = await tx.vacantPosition.update({
        where: { id: applicantId },
        data: { isAssigned: true },
      });
      console.log('‚úÖ Updated applicant status:', updatedApplicant.id);

      console.log('‚úÖ Transaction completed:', {
        vacantPositionId: vacantPositionId,
        transaction: transaction.id,
        updatedApplicant: updatedApplicant.id,
      });

      return {
        success: true,
        vacantPositionId: vacantPositionId,
        transactionId: transaction.id,
        updatedApplicantId: updatedApplicant.id,
        message: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    });

    console.log('üì§ Sending response:', result);
    return NextResponse.json(result);
  } catch (error) {
    console.error('Error assigning position:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to assign position' },
      { status: 500 }
    );
  }
}
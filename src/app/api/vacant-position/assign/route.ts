import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

// POST - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
export async function POST(request: NextRequest) {
  console.log('üîµ API /assign called');
  try {
    const body = await request.json();
    console.log('üì¶ Request body:', body);
    
    const { 
      applicantId, // ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å VacantPosition
      vacantPositionId, // ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å PolicePersonnel
      notes 
    } = body;

    console.log('üîç Extracted params:', { applicantId, vacantPositionId, notes });

    if (!applicantId || !vacantPositionId) {
      console.log('‚ùå Missing required fields');
      return NextResponse.json(
        { error: 'Applicant ID and vacant position ID are required' },
        { status: 400 }
      );
    }

    // ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout
    console.log('üîÑ Starting transaction...');
    const result = await prisma.$transaction(async (tx) => {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠
      console.log('üì• Fetching applicant:', applicantId);
      const applicant = await tx.vacantPosition.findUnique({
        where: { id: applicantId },
        include: {
          posCodeMaster: true,
          requestedPosCode: true,
        }
      });

      if (!applicant) {
        console.log('‚ùå Applicant not found');
        throw new Error('Applicant not found');
      }
      console.log('‚úÖ Found applicant:', applicant.fullName);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (applicant.isAssigned) {
        console.log('‚ùå Applicant already assigned');
        throw new Error('Applicant already assigned');
      }
      console.log('‚úÖ Applicant is not yet assigned');

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å vacant_position (snapshot ‡∏ñ‡∏≤‡∏ß‡∏£)
      console.log('üì• Fetching vacant position:', vacantPositionId);
      const vacantPosition = await tx.vacantPosition.findUnique({
        where: { id: vacantPositionId },
        include: {
          posCodeMaster: true,
        }
      });

      if (!vacantPosition) {
        console.log('‚ùå Vacant position not found');
        throw new Error('Vacant position not found');
      }
      console.log('‚úÖ Found vacant position:', {
        position: vacantPosition.position,
        unit: vacantPosition.unit,
        fullName: vacantPosition.fullName,
        isAssigned: vacantPosition.isAssigned,
        year: vacantPosition.year
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (vacantPosition.isAssigned) {
        console.log('‚ùå Position already assigned');
        throw new Error('CONFLICT:‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      }
      console.log('‚úÖ Position is available for assignment');
      
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á update police_personnel ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏õ‡∏µ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô SwapTransaction ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      console.log('üíæ Creating swap transaction (without updating police_personnel)...');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á SwapTransaction
      const currentYear = new Date().getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
      const transaction = await tx.swapTransaction.create({
        data: {
          year: currentYear,
          swapDate: new Date(),
          swapType: 'vacant-assignment',
          groupName: `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà: ${applicant.fullName} ‚Üí ${vacantPosition.position} ${vacantPosition.unit}`,
          status: 'completed',
          notes: notes || null,
          createdBy: 'admin', // ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏£‡∏¥‡∏á
        },
      });
      console.log('‚úÖ Created transaction:', transaction.id);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
      console.log('üíæ Creating transaction detail...');
      const detail = await tx.swapTransactionDetail.create({
        data: {
          transactionId: transaction.id,
          sequence: 1,
          personnelId: applicant.id,
          nationalId: applicant.nationalId,
          fullName: applicant.fullName || '',
          rank: applicant.rank,
          posCodeId: applicant.posCodeId,
          fromPosition: applicant.position,
          fromPositionNumber: applicant.positionNumber,
          fromUnit: applicant.unit,
          toPosition: vacantPosition.position,
          toPositionNumber: vacantPosition.positionNumber,
          toUnit: vacantPosition.unit,
          notes: null,
        },
      });
      console.log('‚úÖ Created transaction detail:', detail.id);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
      console.log('üìù Updating applicant status to assigned...');
      const updatedApplicant = await tx.vacantPosition.update({
        where: { id: applicantId },
        data: { isAssigned: true },
      });
      console.log('‚úÖ Updated applicant status:', updatedApplicant.id);

      // ‡πÑ‡∏°‡πà update isAssigned ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á (requested_position_id = null)
      // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î data inconsistency
      // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô vacant position ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÑ‡∏î‡πâ
      console.log('‚ÑπÔ∏è Skipping vacant position status update to maintain data consistency');
      console.log('‚ÑπÔ∏è Vacant position (requested_position_id=null) should remain isAssigned=false');

      console.log('‚úÖ Transaction completed:', {
        vacantPositionId: vacantPositionId,
        transaction: transaction.id,
        updatedApplicant: updatedApplicant.id,
      });

      return {
        success: true,
        vacantPositionId: vacantPositionId,
        transactionId: transaction.id,
        updatedApplicantId: updatedApplicant.id,
        message: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    }, {
      maxWait: 5000, // ‡∏£‡∏≠ transaction ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      timeout: 10000, // timeout ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á transaction 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });

    console.log('üì§ Sending response:', result);
    return NextResponse.json(result);
  } catch (error) {
    console.error('Error assigning position:', error);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CONFLICT error
    if (error instanceof Error && error.message.startsWith('CONFLICT:')) {
      const details = error.message.replace('CONFLICT:', '');
      return NextResponse.json(
        { 
          error: 'Position already assigned',
          details: details
        },
        { status: 409 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Applicant already assigned error
    if (error instanceof Error && error.message === 'Applicant already assigned') {
      return NextResponse.json(
        { 
          error: 'Applicant already assigned',
          details: '‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß'
        },
        { status: 409 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Prisma error type
    if (error && typeof error === 'object' && 'code' in error) {
      const prismaError = error as { code: string; message: string };
      if (prismaError.code === 'P2028') {
        return NextResponse.json(
          { 
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            details: 'Transaction timeout - database is busy'
          },
          { status: 503 } // Service Unavailable
        );
      }
    }
    
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to assign position' },
      { status: 500 }
    );
  }
}
import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

// POST - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
export async function POST(request: NextRequest) {
  console.log('üîµ API /unassign called');
  try {
    const body = await request.json();
    console.log('üì¶ Request body:', body);
    
    const { applicantId, reason } = body;

    console.log('üîç Extracted params:', { applicantId, reason });

    if (!applicantId) {
      console.log('‚ùå Missing applicantId');
      return NextResponse.json(
        { error: 'Applicant ID is required' },
        { status: 400 }
      );
    }

    // ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout
    console.log('üîÑ Starting transaction...');
    const result = await prisma.$transaction(async (tx) => {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠
      console.log('üì• Fetching applicant:', applicantId);
      const applicant = await tx.vacantPosition.findUnique({
        where: { id: applicantId },
        select: {
          id: true,
          fullName: true,
          isAssigned: true
        }
      });

      if (!applicant) {
        console.log('‚ùå Applicant not found');
        throw new Error('Applicant not found');
      }
      console.log('‚úÖ Found applicant:', applicant.fullName);

      if (!applicant.isAssigned) {
        console.log('‚ùå Applicant is not assigned');
        throw new Error('Applicant is not assigned, cannot unassign');
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ swap transaction ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      console.log('ÔøΩ Finding related swap transactions...');
      const transactions = await tx.swapTransaction.findMany({
        where: {
          swapType: 'vacant-assignment',
          swapDetails: {
            some: {
              personnelId: applicantId
            }
          }
        },
        include: {
          swapDetails: true
        }
      });
      console.log(`‚úÖ Found ${transactions.length} transaction(s)`);

      let deletedDetailsCount = 0;
      let deletedTransactionsCount = 0;

      // ‡∏•‡∏ö transaction details ‡πÅ‡∏•‡∏∞ transactions
      for (const transaction of transactions) {
        console.log(`üóëÔ∏è Deleting transaction ${transaction.id}...`);
        
        // ‡∏•‡∏ö swap_transaction_detail ‡∏Å‡πà‡∏≠‡∏ô
        const deletedDetails = await tx.swapTransactionDetail.deleteMany({
          where: { transactionId: transaction.id }
        });
        deletedDetailsCount += deletedDetails.count;
        console.log(`‚úÖ Deleted ${deletedDetails.count} detail(s)`);

        // ‡∏•‡∏ö swap_transaction (cascade delete ‡∏à‡∏∞‡∏•‡∏ö details ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        await tx.swapTransaction.delete({
          where: { id: transaction.id }
        });
        deletedTransactionsCount++;
        console.log(`‚úÖ Deleted transaction ${transaction.id}`);
      }

      // Reset isAssigned ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reset ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á (requestedPositionId = null) 
      // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ isAssigned = true ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
      console.log('üîÑ Resetting applicant status...');
      const updatedApplicant = await tx.vacantPosition.update({
        where: { id: applicantId },
        data: { isAssigned: false },
      });
      console.log('‚úÖ Reset applicant status:', updatedApplicant.id);

      return {
        success: true,
        applicantId: updatedApplicant.id,
        deletedTransactions: deletedTransactionsCount,
        deletedDetails: deletedDetailsCount,
        message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      };
    }, {
      maxWait: 5000, // ‡∏£‡∏≠ transaction ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      timeout: 10000, // timeout ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á transaction 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });

    console.log('üì§ Sending response:', result);
    return NextResponse.json(result);
  } catch (error) {
    console.error('üí• Error unassigning position:', error);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Prisma error type
    if (error && typeof error === 'object' && 'code' in error) {
      const prismaError = error as { code: string; message: string };
      if (prismaError.code === 'P2028') {
        return NextResponse.json(
          { 
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            details: 'Transaction timeout - database is busy'
          },
          { status: 503 } // Service Unavailable
        );
      }
    }
    
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to unassign position' },
      { status: 500 }
    );
  }
}

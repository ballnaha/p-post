'use client';
import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Card,
  CardContent,
  Alert,
  CircularProgress,
  LinearProgress,
  Chip,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
  Checkbox,
  FormControlLabel,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';
import {
  Sync as SyncIcon,
  CheckCircle as CheckIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Refresh as RefreshIcon,
  ExpandMore as ExpandMoreIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';
import Layout from '@/app/components/Layout';
import { useToast } from '@/hooks/useToast';

interface SyncStatus {
  year: number;
  personnelVacantCount: number;
  syncedCount: number;
  assignedCount: number;
  availableCount: number;
  needsSync: boolean;
  syncPercentage: number;
}

interface SyncResult {
  year: number;
  synced: number;
  skipped: number;
  total: number;
  existingBefore: number;
  forceResync?: boolean;
  errors?: string[];
}

export default function SyncVacantPositionsPage() {
  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear() + 543);
  const [selectedUnit, setSelectedUnit] = useState<string>('all');
  const [forceResync, setForceResync] = useState<boolean>(false);
  const [availableYears, setAvailableYears] = useState<number[]>([]);
  const [availableUnits, setAvailableUnits] = useState<string[]>([]);
  const [syncStatus, setSyncStatus] = useState<SyncStatus | null>(null);
  const [loading, setLoading] = useState(false);
  const [loadingUnits, setLoadingUnits] = useState(false);
  const [syncing, setSyncing] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [syncResult, setSyncResult] = useState<SyncResult | null>(null);
  const [progress, setProgress] = useState({ current: 0, total: 0, percentage: 0 });
  const toast = useToast();

  // Generate available years
  useEffect(() => {
    const currentBuddhistYear = new Date().getFullYear() + 543;
    const startYear = 2568;
    const years: number[] = [];
    
    for (let year = currentBuddhistYear; year >= startYear; year--) {
      years.push(year);
    }
    
    setAvailableYears(years);
  }, []);

  // Fetch available units
  useEffect(() => {
    fetchUnits();
  }, []);

  const fetchUnits = async () => {
    try {
      setLoadingUnits(true);
      const response = await fetch('/api/police-personnel/units');
      const result = await response.json();

      if (result.success) {
        setAvailableUnits(result.data);
      } else {
        console.error('Failed to fetch units:', result.error);
      }
    } catch (error) {
      console.error('Error fetching units:', error);
    } finally {
      setLoadingUnits(false);
    }
  };

  // Fetch sync status
  useEffect(() => {
    if (selectedYear) {
      fetchSyncStatus();
    }
  }, [selectedYear, selectedUnit]);

  const fetchSyncStatus = async () => {
    try {
      setLoading(true);
      const unitParam = selectedUnit !== 'all' ? `&unit=${encodeURIComponent(selectedUnit)}` : '';
      const response = await fetch(`/api/vacant-position/sync?year=${selectedYear}${unitParam}`);
      const result = await response.json();

      if (result.success) {
        setSyncStatus(result.data);
      } else {
        toast.error(result.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ sync ‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Error fetching sync status:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    } finally {
      setLoading(false);
    }
  };

  const handleYearChange = (event: SelectChangeEvent<number>) => {
    setSelectedYear(Number(event.target.value));
    setSyncResult(null); // Clear previous result
  };

  const handleUnitChange = (event: SelectChangeEvent<string>) => {
    setSelectedUnit(event.target.value);
    setSyncResult(null); // Clear previous result
  };

  const handleSyncClick = () => {
    setConfirmDialogOpen(true);
  };

  const handleConfirmSync = async () => {
    setConfirmDialogOpen(false);
    
    try {
      setSyncing(true);
      setSyncResult(null);
      setProgress({ current: 0, total: 0, percentage: 0 });
      
      const response = await fetch('/api/vacant-position/sync', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          year: selectedYear,
          unit: selectedUnit !== 'all' ? selectedUnit : undefined,
          forceResync: forceResync
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to sync');
      }

      // ‡∏≠‡πà‡∏≤‡∏ô response ‡πÄ‡∏õ‡πá‡∏ô stream ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö progress updates
      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      let buffer = '';

      if (reader) {
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          buffer += decoder.decode(value, { stream: true });
          const lines = buffer.split('\n');
          buffer = lines.pop() || '';

          for (const line of lines) {
            if (line.trim().startsWith('data: ')) {
              try {
                const jsonStr = line.substring(6); // Remove 'data: ' prefix
                const data = JSON.parse(jsonStr);
                
                if (data.type === 'progress') {
                  setProgress({
                    current: data.current,
                    total: data.total,
                    percentage: Math.round((data.current / data.total) * 100)
                  });
                } else if (data.type === 'complete') {
                  setSyncResult(data.data);
                  toast.success('Sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                  // Refresh status
                  await fetchSyncStatus();
                } else if (data.type === 'error') {
                  toast.error(data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync');
                }
              } catch (e) {
                console.error('Error parsing progress data:', e);
              }
            }
          }
        }
      }
    } catch (error) {
      console.error('Error syncing:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync');
    } finally {
      setSyncing(false);
    }
  };

  const handleDeleteClick = () => {
    setDeleteDialogOpen(true);
  };

  const handleConfirmDelete = async () => {
    setDeleteDialogOpen(false);
    
    try {
      setDeleting(true);
      const unitParam = selectedUnit !== 'all' ? `&unit=${encodeURIComponent(selectedUnit)}` : '';
      const response = await fetch(`/api/vacant-position/sync?year=${selectedYear}${unitParam}`, {
        method: 'DELETE',
      });

      const result = await response.json();

      if (result.success) {
        toast.success(`‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${result.data.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
        setSyncResult(null);
        // Refresh status
        await fetchSyncStatus();
      } else {
        toast.error(result.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Error deleting:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setDeleting(false);
    }
  };

  return (
    <Layout>
      <Box>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h5" fontWeight={700} mb={1}>
            Sync ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å police_personnel ‚Üí vacant_position ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ
          </Typography>
        </Box>

        {/* Information Note - Accordion */}
        <Accordion sx={{ mb: 3, bgcolor: 'info.50', borderLeft: 4, borderColor: 'info.main' }}>
          <AccordionSummary
            expandIcon={<ExpandMoreIcon />}
            aria-controls="sync-guide-content"
            id="sync-guide-header"
            sx={{
              '&:hover': { bgcolor: 'info.100' },
              transition: 'background-color 0.2s'
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <InfoIcon sx={{ color: 'info.main', mr: 1.5 }} />
              <Typography variant="h6" fontWeight={600} color="info.main">
                üìö ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Sync ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á
              </Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails sx={{ pt: 1 }}>
            <Typography variant="body2" color="text.secondary" paragraph>
              <strong>üìå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:</strong> ‡∏£‡∏∞‡∏ö‡∏ö Sync ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å <code>police_personnel</code> ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô snapshot ‡πÉ‡∏ô <code>vacant_position</code> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            </Typography>

            <Typography variant="body2" color="text.secondary" paragraph>
              <strong>üîÑ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£ Sync:</strong>
            </Typography>
            
            <Box sx={{ pl: 2, mb: 2 }}>
              <Typography variant="body2" color="text.secondary" component="div">
                <strong>1. ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Normal Sync):</strong>
                <ul style={{ marginTop: 4, marginBottom: 8 }}>
                  <li>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà<strong>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ</strong>‡πÉ‡∏ô vacant_position</li>
                  <li>‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°)</li>
                  <li>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà</li>
                </ul>

                <strong>2. ‡πÇ‡∏´‡∏°‡∏î Force Re-sync ‚ö†Ô∏è:</strong>
                <ul style={{ marginTop: 4, marginBottom: 8 }}>
                  <li><strong style={{ color: '#d32f2f' }}>‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vacant_position ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</strong> (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)</li>
                  <li>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å police_personnel</li>
                  <li>‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</li>
                  <li><strong style={{ color: '#d32f2f' }}>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!</strong></li>
                </ul>
              </Typography>
            </Box>

            <Typography variant="body2" color="text.secondary" paragraph>
              <strong>üìã ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ sync ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á (fullName ‡πÄ‡∏õ‡πá‡∏ô null, "", "‡∏ß‡πà‡∏≤‡∏á", "‡∏ß‡πà‡∏≤‡∏á (‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)", "‡∏ß‡πà‡∏≤‡∏á(‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)")
            </Typography>

            <Typography variant="body2" color="text.secondary" paragraph>
              <strong>üéØ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong>
            </Typography>
            
            <Box sx={{ pl: 2, mb: 2 }}>
              <Typography variant="body2" color="text.secondary" component="div">
                ‚Ä¢ <strong>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ:</strong> sync ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                <br />
                ‚Ä¢ <strong>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢:</strong> sync ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠ sync ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Typography>
            </Box>

            <Alert severity="warning" sx={{ mt: 2 }}>
              <strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Sync:</strong>
              <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 20 }}>
                <li>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà</li>
                <li>‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• police_personnel ‡πÉ‡∏´‡∏°‡πà</li>
                <li>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ Force Re-sync)</li>
              </ul>
            </Alert>
          </AccordionDetails>
        </Accordion>

        {/* Year and Unit Selector */}
        <Paper sx={{ p: 3, mb: 3 }}>
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 2 }}>
            <FormControl fullWidth>
              <InputLabel>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏û.‡∏®.)</InputLabel>
              <Select
                value={selectedYear}
                label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏û.‡∏®.)"
                onChange={handleYearChange}
              >
                {availableYears.map((year) => (
                  <MenuItem key={year} value={year}>
                    {year}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth>
              <InputLabel>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢</InputLabel>
              <Select
                value={selectedUnit}
                label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢"
                onChange={handleUnitChange}
                disabled={loadingUnits}
              >
                <MenuItem value="all">
                  <em>‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢</em>
                </MenuItem>
                {availableUnits.map((unit) => (
                  <MenuItem key={unit} value={unit}>
                    {unit}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>

          <Divider sx={{ my: 2 }} />

          {/* Force Re-sync Option */}
          <FormControlLabel
            control={
              <Checkbox
                checked={forceResync}
                onChange={(e) => setForceResync(e.target.checked)}
                color="warning"
              />
            }
            label={
              <Box>
                <Typography variant="body2" fontWeight={600}>
                  Force Re-sync (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞ sync ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  ‚ö†Ô∏è ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vacant_position ‡∏ó‡∏µ‡πà sync ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </Typography>
              </Box>
            }
          />
        </Paper>

        {/* Sync Status */}
        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
            <CircularProgress />
          </Box>
        ) : syncStatus ? (
          <>
            {/* Status Cards */}
            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' }, gap: 2, mb: 3 }}>
              <Card>
                <CardContent>
                  <Typography variant="caption" color="text.secondary" gutterBottom>
                    ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô police_personnel
                  </Typography>
                  <Typography variant="h3" fontWeight={700} color="primary.main">
                    {syncStatus.personnelVacantCount}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" mt={1}>
                    ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                  </Typography>
                </CardContent>
              </Card>

              <Card>
                <CardContent>
                  <Typography variant="caption" color="text.secondary" gutterBottom>
                    Sync ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô vacant_position
                  </Typography>
                  <Typography variant="h3" fontWeight={700} color="success.main">
                    {syncStatus.syncedCount}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" mt={1}>
                    ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {syncStatus.assignedCount} ‚Ä¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {syncStatus.availableCount}
                  </Typography>
                </CardContent>
              </Card>
            </Box>

            {/* Sync Progress */}
            <Paper sx={{ p: 3, mb: 3 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6" fontWeight={700}>
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Sync
                </Typography>
                <Chip
                  icon={syncStatus.needsSync ? <WarningIcon /> : <CheckIcon />}
                  label={syncStatus.needsSync ? '‡∏ï‡πâ‡∏≠‡∏á Sync' : 'Sync ‡πÅ‡∏•‡πâ‡∏ß'}
                  color={syncStatus.needsSync ? 'warning' : 'success'}
                />
              </Box>

              <Box sx={{ mb: 2 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                  <Typography variant="body2" color="text.secondary">
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                  </Typography>
                  <Typography variant="body2" fontWeight={700}>
                    {syncStatus.syncPercentage}%
                  </Typography>
                </Box>
                <LinearProgress
                  variant="determinate"
                  value={syncStatus.syncPercentage}
                  sx={{
                    height: 10,
                    borderRadius: 5,
                    bgcolor: 'grey.200',
                    '& .MuiLinearProgress-bar': {
                      borderRadius: 5,
                      bgcolor: syncStatus.syncPercentage >= 100 ? 'success.main' : 'warning.main',
                    },
                  }}
                />
              </Box>

              <Alert severity="info" icon={<InfoIcon />} sx={{ mt: 2 }}>
                <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Ñ‡∏ß‡∏£ sync ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà:
                <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 20 }}>
                  <li>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà</li>
                  <li>Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• police_personnel ‡πÉ‡∏´‡∏°‡πà</li>
                  <li>‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</li>
                </ul>
              </Alert>
            </Paper>

            {/* Real-time Sync Progress */}
            {syncing && progress.total > 0 && (
              <Paper sx={{ p: 3, mb: 3, bgcolor: 'info.50', borderLeft: 4, borderColor: 'info.main' }}>
                <Typography variant="h6" fontWeight={700} color="info.main" mb={2}>
                  <CircularProgress size={20} sx={{ verticalAlign: 'middle', mr: 1 }} />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á Sync...
                </Typography>
                
                <Box sx={{ mb: 2 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2" color="text.secondary">
                      ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress.current} / {progress.total}
                    </Typography>
                    <Typography variant="body2" fontWeight={700} color="info.main">
                      {progress.percentage}%
                    </Typography>
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={progress.percentage}
                    sx={{
                      height: 10,
                      borderRadius: 5,
                      bgcolor: 'grey.200',
                      '& .MuiLinearProgress-bar': {
                        borderRadius: 5,
                        bgcolor: 'info.main',
                      },
                    }}
                  />
                </Box>

                <Alert severity="info" icon={<InfoIcon />}>
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà... ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </Alert>
              </Paper>
            )}

            {/* Sync Result */}
            {syncResult && (
              <Paper sx={{ p: 3, mb: 3, bgcolor: 'success.50', borderLeft: 4, borderColor: 'success.main' }}>
                <Typography variant="h6" fontWeight={700} color="success.main" mb={2}>
                  <CheckIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
                  {syncResult.forceResync ? 'Force Re-sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' : 'Sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'}
                </Typography>

                {syncResult.forceResync && (
                  <Alert severity="info" sx={{ mb: 2 }}>
                    ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
                  </Alert>
                )}
                
                <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: 2 }}>
                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {syncResult.forceResync ? '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà' : 'Sync ‡πÉ‡∏´‡∏°‡πà'}
                    </Typography>
                    <Typography variant="h5" fontWeight={700}>{syncResult.synced}</Typography>
                  </Box>
                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {syncResult.forceResync ? '‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ)' : '‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ (‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)'}
                    </Typography>
                    <Typography variant="h5" fontWeight={700}>{syncResult.skipped}</Typography>
                  </Box>
                  <Box>
                    <Typography variant="caption" color="text.secondary">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Typography>
                    <Typography variant="h5" fontWeight={700}>{syncResult.total}</Typography>
                  </Box>
                </Box>

                {syncResult.errors && syncResult.errors.length > 0 && (
                  <Alert severity="warning" sx={{ mt: 2 }}>
                    <strong>‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô:</strong>
                    <ul style={{ marginTop: 8, marginBottom: 0 }}>
                      {syncResult.errors.slice(0, 5).map((error, idx) => (
                        <li key={idx}>{error}</li>
                      ))}
                    </ul>
                  </Alert>
                )}
              </Paper>
            )}

            {/* Action Buttons */}
            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
              <Button
                variant="contained"
                size="large"
                startIcon={syncing ? <CircularProgress size={20} color="inherit" /> : <SyncIcon />}
                onClick={handleSyncClick}
                disabled={syncing || deleting}
                sx={{ flex: { xs: '1 1 100%', sm: '1 1 auto' } }}
              >
                {syncing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á Sync...' : 'Sync ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á'}
              </Button>
              <Button
                variant="outlined"
                size="large"
                color="error"
                startIcon={deleting ? <CircularProgress size={20} color="inherit" /> : <DeleteIcon />}
                onClick={handleDeleteClick}
                disabled={syncing || deleting || !syncStatus || syncStatus.syncedCount === 0}
                sx={{ flex: { xs: '1 1 100%', sm: '0 1 auto' } }}
              >
                {deleting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...' : '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
              </Button>
              <Button
                variant="outlined"
                size="large"
                startIcon={<RefreshIcon />}
                onClick={fetchSyncStatus}
                disabled={loading || syncing || deleting}
                sx={{ flex: { xs: '1 1 100%', sm: '0 1 auto' } }}
              >
                ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
              </Button>
            </Box>
          </>
        ) : null}

        {/* Confirm Dialog */}
        <Dialog open={confirmDialogOpen} onClose={() => setConfirmDialogOpen(false)} maxWidth="sm" fullWidth>
          <DialogTitle>
            {forceResync ? '‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ Force Re-sync' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ Sync ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á'}
          </DialogTitle>
          <DialogContent>
            <Alert severity={forceResync ? 'error' : 'warning'} sx={{ mb: 2 }}>
              ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞ {forceResync ? 'Force Re-sync' : 'sync'} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ <strong>{selectedYear}</strong>
              {selectedUnit !== 'all' && (
                <>
                  {' '}‡∏´‡∏ô‡πà‡∏ß‡∏¢ <strong>{selectedUnit}</strong>
                </>
              )}
            </Alert>

            {forceResync && (
              <Alert severity="error" sx={{ mb: 2 }}>
                <strong>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: Force Re-sync</strong>
                <br />
                ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡∏à‡∏∞<strong>‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vacant_position ‡∏ó‡∏µ‡πà sync ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</strong>‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                {selectedUnit !== 'all' ? ` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢ ${selectedUnit}` : ''}
                <br />
                <strong>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!</strong>
              </Alert>
            )}

            <Typography variant="body2" color="text.secondary">
              ‡∏Å‡∏≤‡∏£ sync ‡∏à‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å police_personnel ‡∏•‡∏á‡πÉ‡∏ô vacant_position
              <br /><br />
              {forceResync ? (
                <>
                  <strong>‡πÇ‡∏´‡∏°‡∏î Force Re-sync:</strong>
                  <br />
                  ‚Ä¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vacant_position ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                  {selectedUnit !== 'all' && ` (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢ ${selectedUnit})`}
                  <br />
                  ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å police_personnel
                  <br />
                  ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </>
              ) : (
                <>
                  ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
                  <br />
                  ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà sync ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô snapshot ‡∏ñ‡∏≤‡∏ß‡∏£
                  <br />
                  ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ assignment
                  {selectedUnit !== 'all' && (
                    <>
                      <br />
                      ‚Ä¢ ‡∏à‡∏∞ sync ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢ {selectedUnit} ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                    </>
                  )}
                </>
              )}
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setConfirmDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              variant="contained"
              onClick={handleConfirmSync}
              autoFocus
            >
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Sync
            </Button>
          </DialogActions>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)} maxWidth="sm" fullWidth>
          <DialogTitle sx={{ color: 'error.main' }}>
            üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </DialogTitle>
          <DialogContent>
            <Alert severity="error" sx={{ mb: 2 }}>
              <strong>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!</strong>
            </Alert>

            <Typography variant="body1" gutterBottom fontWeight={600}>
              ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vacant_position ‡∏ó‡∏µ‡πà sync ‡πÅ‡∏•‡πâ‡∏ß:
            </Typography>

            <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, my: 2 }}>
              <Typography variant="body2">
                <strong>‡∏õ‡∏µ:</strong> {selectedYear}
              </Typography>
              <Typography variant="body2">
                <strong>‡∏´‡∏ô‡πà‡∏ß‡∏¢:</strong> {selectedUnit === 'all' ? '‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢' : selectedUnit}
              </Typography>
              <Typography variant="body2" color="error.main" mt={1}>
                <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö:</strong> {syncStatus?.syncedCount || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </Typography>
            </Box>

            <Typography variant="body2" color="text.secondary">
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ñ‡∏≤‡∏ß‡∏£ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ sync ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            </Typography>

            <Alert severity="warning" sx={{ mt: 2 }}>
              <strong>üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà sync ‡∏°‡∏≤‡∏à‡∏≤‡∏Å police_personnel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
              (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ nominate ‡∏´‡∏£‡∏∑‡∏≠ request)
            </Alert>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDeleteDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              variant="contained"
              color="error"
              onClick={handleConfirmDelete}
              startIcon={<DeleteIcon />}
            >
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Layout>
  );
}
